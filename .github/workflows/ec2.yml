name: Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      tag_value:
        description: 'Tags to apply to the resources'
        default: '{"BusinessContact":"cpe@rate.com", "BusinessOwner":"cpe", "CodeRepo":"https://github.com/guaranteed-rate/terraform-aws-app-modules", "Compliance":"none", "Criticality":"low", "Environment":"nonprod", "ManagedBy":"terraform", "Product":"terraform-aws-app-modules", "PublicFacing":"no", "RetirementDate":"2026-01-01", "StackId":"a88ceb67-59e2-7ef3-b9fe-7d6aabb56258", "TechContact":"cpe@rate.com",   "TechOwner":"cpe"}'
        required: false
      server_name:
        description: 'Name of server'
        required: true
      subnet_id:
        description: 'ID for subnet'
        required: true
      aws_region:
        description: 'AWS region'
        required: true
      
jobs:
  artifacts:
    runs-on: [ self-hosted, Linux, X64, nonprod-platform ]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.GH_NONPROD_SAAS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}


          
      - name: Checkout Repo
        uses: actions/checkout@v3.5.3
        
      - name: Debug GITHUB_WORKSPACE
        run: echo "GITHUB_WORKSPACE:$GITHUB_WORKSPACE"
        
      - name: Display current working directory
        run: |
          echo "Current working directory: $PWD"
         
      - name: List directory contents
        run: |
          ls -la
          
      - name: Zip node application
        run: |
          ls
          zip -r ${{ vars.APPLICATION_ZIP_NAME }} ./${{ vars.NODE_APPLICATION_DIR }}/*
          
      - name: Store artifact in S3
        run: |
          ls
          aws s3 cp ${{vars.APPLICATION_ZIP_NAME}} s3://${{ vars.APPLICATION_DIR }}/${{ vars.APPLICATION_ZIP_NAME }}


  Deploy:
    name: Terraform Plan
    needs: artifacts
    runs-on: [ self-hosted, Linux, X64, nonprod-platform ]
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.GH_NONPROD_SAAS_ROLE_ARN }}
          aws-region:  ${{ vars.AWS_REGION }}
          role-session-name: terraform-session
          
      - name: Checkout Repo
        uses: actions/checkout@v3.5.3
        
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Configure Git
        run: |
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6
        
      - name: Debug GITHUB_WORKSPACE
        run: echo "GITHUB_WORKSPACE:$GITHUB_WORKSPACE"
        
      - name: Display current working directory
        run: |
          echo "Current working directory: $PWD"
         
      - name: List directory contents
        run: |
          ls -la
          
      - name: Initialize and Validate Terraform
        run: |
          cd terraform-ec2-deployment/plans/saas/nonprod
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform-ec2-deployment/plans/saas/nonprod
          terraform plan -var "server_name=${{ github.event.inputs.server_name }}" -var "subnet_id=${{ github.event.inputs.subnet_id }}" -var 'tags=${{ github.event.inputs.tag_value }}' -out=tfplan
  
  terraform-apply:
    needs: Deploy
    runs-on: [ self-hosted, Linux, X64, nonprod-platform ]
    permissions:
      id-token: write
      contents: read
    environment: 'apply'
    name: Terraform Apply 

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.GH_NONPROD_SAAS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          audience: sts.amazonaws.com
          
      - name: Checkout Repo
        uses: actions/checkout@v3.5.3
          
      - name: Debug GITHUB_WORKSPACE
        run: echo "GITHUB_WORKSPACE:$GITHUB_WORKSPACE"
        
      - name: Display current working directory
        run: |
          echo "Current working directory: $PWD"
         
      - name: List directory contents
        run: |
          ls -la
          
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Configure Git
        run: |
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Apply plan
        run: |
          cd $GITHUB_WORKSPACE/terraform-ec2-deployment/plans/saas/nonprod
          terraform init
          terraform apply -var "server_name=${{ github.event.inputs.server_name }}" -var "subnet_id=${{ github.event.inputs.subnet_id }}" -var 'tags=${{ github.event.inputs.tag_value }}' -auto-approve
          # terraform destroy -var "server_name=${{ github.event.inputs.server_name }}" -var "subnet_id=${{ github.event.inputs.subnet_id }}" -var 'tags=${{ github.event.inputs.tag_value }}' -auto-approve

